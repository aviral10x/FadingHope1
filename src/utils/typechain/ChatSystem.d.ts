/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ChatSystemInterface extends ethers.utils.Interface {
  functions: {
    "PinGlobalMessage(string)": FunctionFragment;
    "SendGlobalMessage(string)": FunctionFragment;
    "ViewLastPinnedMessage(uint256)": FunctionFragment;
    "getLength()": FunctionFragment;
    "pinMessages(uint256)": FunctionFragment;
    "pinTimestamps(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PinGlobalMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SendGlobalMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ViewLastPinnedMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getLength", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pinMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pinTimestamps",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PinGlobalMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SendGlobalMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ViewLastPinnedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pinMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pinTimestamps",
    data: BytesLike
  ): Result;

  events: {
    "GlobalMessageEvent(string)": EventFragment;
    "PinGlobalMessageEvent(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GlobalMessageEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PinGlobalMessageEvent"): EventFragment;
}

export type GlobalMessageEventEvent = TypedEvent<
  [string] & { message: string }
>;

export type PinGlobalMessageEventEvent = TypedEvent<
  [string] & { message: string }
>;

export class ChatSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChatSystemInterface;

  functions: {
    PinGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SendGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ViewLastPinnedMessage(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { messages: string[]; timestamps: BigNumber[] }
    >;

    getLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    pinMessages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pinTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  PinGlobalMessage(
    message: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SendGlobalMessage(
    message: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ViewLastPinnedMessage(
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { messages: string[]; timestamps: BigNumber[] }
  >;

  getLength(overrides?: CallOverrides): Promise<BigNumber>;

  pinMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pinTimestamps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PinGlobalMessage(message: string, overrides?: CallOverrides): Promise<void>;

    SendGlobalMessage(
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ViewLastPinnedMessage(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { messages: string[]; timestamps: BigNumber[] }
    >;

    getLength(overrides?: CallOverrides): Promise<BigNumber>;

    pinMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pinTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "GlobalMessageEvent(string)"(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    GlobalMessageEvent(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    "PinGlobalMessageEvent(string)"(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    PinGlobalMessageEvent(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;
  };

  estimateGas: {
    PinGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SendGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ViewLastPinnedMessage(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLength(overrides?: CallOverrides): Promise<BigNumber>;

    pinMessages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pinTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PinGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SendGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ViewLastPinnedMessage(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pinMessages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pinTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
