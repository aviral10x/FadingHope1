/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MasterContractInterface extends ethers.utils.Interface {
  functions: {
    "AttackKingdom(uint256,uint256,string)": FunctionFragment;
    "BurnKingdom(uint256)": FunctionFragment;
    "ClaimKingdomReward(uint256)": FunctionFragment;
    "MintNewUnit(uint256,bytes32)": FunctionFragment;
    "MintPlayerKingdom(uint256,address,string)": FunctionFragment;
    "PinGlobalMessage(string)": FunctionFragment;
    "SendGlobalMessage(string)": FunctionFragment;
    "SetBuildingCost(uint256,uint256[])": FunctionFragment;
    "SetTownCenterIncome(uint256[])": FunctionFragment;
    "UpgradeKingdomBuilding(uint256,uint256)": FunctionFragment;
    "ViewLastPinnedMessage(uint256)": FunctionFragment;
    "blueprints(uint256)": FunctionFragment;
    "buildingCosts(uint256,uint256)": FunctionFragment;
    "calculateTownIncome(uint256,uint256)": FunctionFragment;
    "freeMint(address,string)": FunctionFragment;
    "freeMintWithURI(address,string,string)": FunctionFragment;
    "getBuildingCost(uint256,uint256)": FunctionFragment;
    "getLength()": FunctionFragment;
    "kingdoms()": FunctionFragment;
    "mintKingdomPenalty()": FunctionFragment;
    "mintKingdomPenaltyMultiplier()": FunctionFragment;
    "owner()": FunctionFragment;
    "pinMessages(uint256)": FunctionFragment;
    "pinTimestamps(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AttackKingdom",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "BurnKingdom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimKingdomReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MintNewUnit",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "MintPlayerKingdom",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "PinGlobalMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SendGlobalMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SetBuildingCost",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "SetTownCenterIncome",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "UpgradeKingdomBuilding",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ViewLastPinnedMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blueprints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buildingCosts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTownIncome",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMint",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "freeMintWithURI",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuildingCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getLength", values?: undefined): string;
  encodeFunctionData(functionFragment: "kingdoms", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintKingdomPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintKingdomPenaltyMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pinMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pinTimestamps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "AttackKingdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BurnKingdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClaimKingdomReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MintNewUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MintPlayerKingdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PinGlobalMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SendGlobalMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetBuildingCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetTownCenterIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpgradeKingdomBuilding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ViewLastPinnedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blueprints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buildingCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTownIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeMintWithURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuildingCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kingdoms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintKingdomPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintKingdomPenaltyMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pinMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pinTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "GlobalMessageEvent(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PinGlobalMessageEvent(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GlobalMessageEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PinGlobalMessageEvent"): EventFragment;
}

export type GlobalMessageEventEvent = TypedEvent<
  [string] & { message: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PinGlobalMessageEventEvent = TypedEvent<
  [string] & { message: string }
>;

export class MasterContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MasterContractInterface;

  functions: {
    AttackKingdom(
      fromTokenId: BigNumberish,
      targetTokenId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    BurnKingdom(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ClaimKingdomReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    MintNewUnit(
      tokenId: BigNumberish,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    MintPlayerKingdom(
      kingdomTokenId: BigNumberish,
      to: string,
      kingdomName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    PinGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SendGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetBuildingCost(
      buildingId: BigNumberish,
      _upgradeCost: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetTownCenterIncome(
      incomePerSec: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    UpgradeKingdomBuilding(
      tokenId: BigNumberish,
      buildingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ViewLastPinnedMessage(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { messages: string[]; timestamps: BigNumber[] }
    >;

    blueprints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    buildingCosts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTownIncome(
      buildingLevel: BigNumberish,
      timePassed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    freeMint(
      _to: string,
      kingdomName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeMintWithURI(
      _to: string,
      kingdomName: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuildingCost(
      buildingId: BigNumberish,
      buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    kingdoms(overrides?: CallOverrides): Promise<[string]>;

    mintKingdomPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintKingdomPenaltyMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pinMessages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pinTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AttackKingdom(
    fromTokenId: BigNumberish,
    targetTokenId: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  BurnKingdom(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ClaimKingdomReward(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  MintNewUnit(
    tokenId: BigNumberish,
    name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  MintPlayerKingdom(
    kingdomTokenId: BigNumberish,
    to: string,
    kingdomName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  PinGlobalMessage(
    message: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SendGlobalMessage(
    message: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetBuildingCost(
    buildingId: BigNumberish,
    _upgradeCost: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetTownCenterIncome(
    incomePerSec: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  UpgradeKingdomBuilding(
    tokenId: BigNumberish,
    buildingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ViewLastPinnedMessage(
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { messages: string[]; timestamps: BigNumber[] }
  >;

  blueprints(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  buildingCosts(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTownIncome(
    buildingLevel: BigNumberish,
    timePassed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  freeMint(
    _to: string,
    kingdomName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeMintWithURI(
    _to: string,
    kingdomName: string,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuildingCost(
    buildingId: BigNumberish,
    buildingLevel: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLength(overrides?: CallOverrides): Promise<BigNumber>;

  kingdoms(overrides?: CallOverrides): Promise<string>;

  mintKingdomPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  mintKingdomPenaltyMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pinMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pinTimestamps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AttackKingdom(
      fromTokenId: BigNumberish,
      targetTokenId: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    BurnKingdom(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ClaimKingdomReward(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    MintNewUnit(
      tokenId: BigNumberish,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    MintPlayerKingdom(
      kingdomTokenId: BigNumberish,
      to: string,
      kingdomName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    PinGlobalMessage(message: string, overrides?: CallOverrides): Promise<void>;

    SendGlobalMessage(
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    SetBuildingCost(
      buildingId: BigNumberish,
      _upgradeCost: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    SetTownCenterIncome(
      incomePerSec: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    UpgradeKingdomBuilding(
      tokenId: BigNumberish,
      buildingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ViewLastPinnedMessage(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { messages: string[]; timestamps: BigNumber[] }
    >;

    blueprints(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    buildingCosts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTownIncome(
      buildingLevel: BigNumberish,
      timePassed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeMint(
      _to: string,
      kingdomName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    freeMintWithURI(
      _to: string,
      kingdomName: string,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuildingCost(
      buildingId: BigNumberish,
      buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLength(overrides?: CallOverrides): Promise<BigNumber>;

    kingdoms(overrides?: CallOverrides): Promise<string>;

    mintKingdomPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    mintKingdomPenaltyMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pinMessages(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pinTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GlobalMessageEvent(string)"(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    GlobalMessageEvent(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PinGlobalMessageEvent(string)"(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;

    PinGlobalMessageEvent(
      message?: null
    ): TypedEventFilter<[string], { message: string }>;
  };

  estimateGas: {
    AttackKingdom(
      fromTokenId: BigNumberish,
      targetTokenId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    BurnKingdom(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ClaimKingdomReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    MintNewUnit(
      tokenId: BigNumberish,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    MintPlayerKingdom(
      kingdomTokenId: BigNumberish,
      to: string,
      kingdomName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    PinGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SendGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetBuildingCost(
      buildingId: BigNumberish,
      _upgradeCost: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetTownCenterIncome(
      incomePerSec: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    UpgradeKingdomBuilding(
      tokenId: BigNumberish,
      buildingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ViewLastPinnedMessage(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blueprints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buildingCosts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTownIncome(
      buildingLevel: BigNumberish,
      timePassed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeMint(
      _to: string,
      kingdomName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeMintWithURI(
      _to: string,
      kingdomName: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuildingCost(
      buildingId: BigNumberish,
      buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLength(overrides?: CallOverrides): Promise<BigNumber>;

    kingdoms(overrides?: CallOverrides): Promise<BigNumber>;

    mintKingdomPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    mintKingdomPenaltyMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pinMessages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pinTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AttackKingdom(
      fromTokenId: BigNumberish,
      targetTokenId: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    BurnKingdom(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ClaimKingdomReward(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    MintNewUnit(
      tokenId: BigNumberish,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    MintPlayerKingdom(
      kingdomTokenId: BigNumberish,
      to: string,
      kingdomName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    PinGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SendGlobalMessage(
      message: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetBuildingCost(
      buildingId: BigNumberish,
      _upgradeCost: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetTownCenterIncome(
      incomePerSec: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    UpgradeKingdomBuilding(
      tokenId: BigNumberish,
      buildingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ViewLastPinnedMessage(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blueprints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildingCosts(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTownIncome(
      buildingLevel: BigNumberish,
      timePassed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeMint(
      _to: string,
      kingdomName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeMintWithURI(
      _to: string,
      kingdomName: string,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuildingCost(
      buildingId: BigNumberish,
      buildingLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kingdoms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintKingdomPenalty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintKingdomPenaltyMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pinMessages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pinTimestamps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
